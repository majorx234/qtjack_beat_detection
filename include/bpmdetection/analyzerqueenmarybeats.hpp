#ifndef ANALYZERQUEENMARYBEATS_HPP_
#define ANALYZERQUEENMARYBEATS_HPP_

#include "analyzerplugin.hpp"
#include "buffering_utils.hpp"
#include <vector>
#include <memory>

class AnalyzerQueenMaryBeats : public AnalyzerBeatsPlugin {
 public:
  static AnalyzerPluginInfo pluginInfo() {
        return AnalyzerPluginInfo(
                // Don't change this ID. It was auto generated by VAMP until
                // Mixxx 2.1 and we keep it for a compatible config.
                "qm-tempotracker:0",
                std::string("Queen Mary University London"),
                std::string("Queen Mary Tempo and Beat Tracker"),
                true);
  }
  AnalyzerQueenMaryBeats();
  ~AnalyzerQueenMaryBeats() override;

  AnalyzerPluginInfo info() const override {
    return pluginInfo();
  }

  bool initialize(unsigned int sampleRate) override;
  bool processSamples(const float* pIn, const int iLen) override;
  bool finalize() override;

  bool supportsBeatTracking() const override {
    return true;
  }

  virtual std::vector<unsigned int> getBeats() const override {
    return m_resultBeats;
  }
 private:
  std::unique_ptr<DetectionFunction> m_pDetectionFunction;
  DownmixAndOverlapHelper m_helper;
  unsigned int m_sampleRate;
  int m_windowSize;
  int m_stepSizeFrames;
  std::vector<double> m_detectionResults;
  std::vector<unsigned int> m_resultBeats;
};

#endif // ANALYZERQUEENMARYBEATS_HPP_
